import streamlit as st
import requests
import json
from datetime import datetime

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Chat v·ªõi Gemini & Gemma",
    page_icon="ü§ñ",
    layout="wide"
)

# CSS ƒë·ªÉ l√†m ƒë·∫πp giao di·ªán
st.markdown("""
<style>
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
        color: #1f1f1f !important;
    }
    .user-message {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
        color: #0d47a1 !important;
    }
    .assistant-message {
        background-color: #f3e5f5;
        border-left: 4px solid #9c27b0;
        color: #4a148c !important;
    }
    .chat-message strong {
        color: inherit !important;
        font-weight: bold;
    }
    .chat-message p, .chat-message div {
        color: inherit !important;
    }
    .timestamp {
        font-size: 0.8rem;
        color: #666 !important;
        margin-top: 0.5rem;
        opacity: 0.7;
    }
    .error-message {
        background-color: #ffebee;
        border-left: 4px solid #f44336;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        color: #c62828 !important;
    }
    /* ƒê·∫£m b·∫£o text trong chat lu√¥n c√≥ contrast t·ªët */
    .user-message * {
        color: #0d47a1 !important;
    }
    .assistant-message * {
        color: #4a148c !important;
    }
    .user-message .timestamp {
        color: #1565c0 !important;
    }
    .assistant-message .timestamp {
        color: #7b1fa2 !important;
    }
</style>
""", unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ
st.title("ü§ñ Chat v·ªõi Google AI Models")
st.markdown("Tr√≤ chuy·ªán v·ªõi Gemini v√† Gemma th√¥ng qua Google AI Studio API")

# Sidebar ƒë·ªÉ c·∫•u h√¨nh
with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh")
    
    # Nh·∫≠p API Key
    api_key = st.text_input(
        "Google AI Studio API Key:",
        type="password",
        help="L·∫•y API key t·ª´ https://aistudio.google.com/"
    )
    
    # Ch·ªçn model
    model_choice = st.selectbox(
        "Ch·ªçn Model:",
        [
            "gemini-2.0-flash-lite",
            "gemini-2.0-flash"
            # "gemma-3-27b-it"
        ],
        help="Ch·ªçn model AI b·∫°n mu·ªën s·ª≠ d·ª•ng"
    )
    
    # C√†i ƒë·∫∑t generation config
    st.subheader("C√†i ƒë·∫∑t Model")
    temperature = st.slider("Temperature (ƒë·ªô s√°ng t·∫°o):", 0.0, 1.0, 0.7, 0.1)
    max_tokens = st.slider("Max tokens:", 100, 8192, 1024, 100)
    top_p = st.slider("Top P:", 0.0, 1.0, 0.95, 0.05)
    top_k = st.slider("Top K:", 1, 100, 40, 1)
    
    # N√∫t x√≥a l·ªãch s·ª≠
    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat"):
        st.session_state.messages = []
        st.rerun()
    
    # Th√¥ng tin
    st.markdown("---")
    st.markdown("**üìã Dependencies c·∫ßn thi·∫øt:**")
    st.code("pip install streamlit requests", language="bash")

# Kh·ªüi t·∫°o session state
if "messages" not in st.session_state:
    st.session_state.messages = []

# H√†m g·ªçi API tr·ª±c ti·∫øp
def call_gemini_api(message, model_name, api_key, temp=0.7, max_tok=1024, top_p=0.95, top_k=40):
    """
    G·ªçi Google AI Studio API tr·ª±c ti·∫øp s·ª≠ d·ª•ng requests
    """
    url = f"https://generativelanguage.googleapis.com/v1beta/models/{model_name}:generateContent?key={api_key}"
    
    headers = {
        "Content-Type": "application/json"
    }
    
    payload = {
        "contents": [
            {
                "parts": [
                    {
                        "text": message
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": temp,
            "topK": top_k,
            "topP": top_p,
            "maxOutputTokens": max_tok,
        },
        "safetySettings": [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH", 
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            }
        ]
    }
    
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if 'candidates' in result and len(result['candidates']) > 0:
                if 'content' in result['candidates'][0]:
                    return result['candidates'][0]['content']['parts'][0]['text']
                else:
                    return "‚ùå Ph·∫£n h·ªìi b·ªã ch·∫∑n b·ªüi safety filters."
            else:
                return "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ model."
        else:
            error_msg = f"HTTP {response.status_code}"
            try:
                error_detail = response.json()
                if 'error' in error_detail:
                    error_msg += f": {error_detail['error'].get('message', 'Unknown error')}"
            except:
                pass
            return f"‚ùå L·ªói API: {error_msg}"
            
    except requests.exceptions.Timeout:
        return "‚ùå Timeout: API kh√¥ng ph·∫£n h·ªìi trong 30 gi√¢y."
    except requests.exceptions.RequestException as e:
        return f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}"
    except Exception as e:
        return f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"

# H√†m ki·ªÉm tra API key
def test_api_key(api_key, model_name):
    """
    Test API key v·ªõi m·ªôt c√¢u h·ªèi ƒë∆°n gi·∫£n
    """
    test_response = call_gemini_api("Hello", model_name, api_key, temp=0.1, max_tok=10)
    return not test_response.startswith("‚ùå")

# Ki·ªÉm tra API key
if not api_key:
    st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Google AI Studio API Key ·ªü sidebar ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
    st.info("""
    **H∆∞·ªõng d·∫´n l·∫•y API Key:**
    1. Truy c·∫≠p https://aistudio.google.com/
    2. ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n Google
    3. V√†o "Get API Key" ‚Üí "Create API Key"
    4. Copy v√† paste v√†o √¥ b√™n tr√°i
    
    **L∆∞u √Ω:** App n√†y s·ª≠ d·ª•ng REST API tr·ª±c ti·∫øp, t∆∞∆°ng th√≠ch v·ªõi m·ªçi phi√™n b·∫£n Python!
    """)
else:
    # Test API key
    with st.spinner("üîç Ki·ªÉm tra API key..."):
        if test_api_key(api_key, model_choice):
            st.success(f"‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi {model_choice}")
            
            # Container cho chat
            chat_container = st.container()
            
            # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
            with chat_container:
                for message in st.session_state.messages:
                    if message["role"] == "user":
                        st.markdown(f"""
                        <div class="chat-message user-message">
                            <strong>üë§ B·∫°n:</strong><br>
                            {message["content"]}
                        </div>
                        """, unsafe_allow_html=True)
                        st.caption(f"‚è∞ {message['timestamp']}")
                    else:
                        model_name = message.get("model", "AI")
                        st.markdown(f"""
                        <div class="chat-message assistant-message">
                            <strong>ü§ñ {model_name}:</strong><br>
                            <div style="white-space: pre-wrap; line-height: 1.2; margin: 0.5rem 0;">{message["content"].replace('<', '&lt;').replace('>', '&gt;')}</div>
                        </div>
                        """, unsafe_allow_html=True)
                        st.caption(f"‚è∞ {message['timestamp']}")
                        print(message["content"])
            
            # Input cho tin nh·∫Øn m·ªõi
            st.markdown("---")
            col1, col2 = st.columns([4, 1])
            
            with col1:
                user_input = st.text_area(
                    "Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n:",
                    height=100,
                    placeholder="H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨...",
                    key="user_input"
                )
            
            with col2:
                st.markdown("<br>", unsafe_allow_html=True)  # Spacing
                send_button = st.button("üì§ G·ª≠i", use_container_width=True)
                
            # Shortcut Enter ƒë·ªÉ g·ª≠i
            if st.checkbox("Nh·∫•n Ctrl+Enter ƒë·ªÉ g·ª≠i", value=True):
                st.markdown("üí° *Tip: Checkbox n√†y ch·ªâ ƒë·ªÉ nh·∫Øc nh·ªü, b·∫°n v·∫´n c·∫ßn click n√∫t G·ª≠i*")
            
            # X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
            if send_button and user_input.strip():
                # Th√™m tin nh·∫Øn c·ªßa user
                timestamp = datetime.now().strftime("%H:%M:%S")
                st.session_state.messages.append({
                    "role": "user",
                    "content": user_input,
                    "timestamp": timestamp
                })
                
                # Hi·ªÉn th·ªã spinner khi ƒëang x·ª≠ l√Ω
                with st.spinner(f"ü§î {model_choice} ƒëang suy nghƒ©..."):
                    response = call_gemini_api(
                        user_input, 
                        model_choice, 
                        api_key, 
                        temp=temperature, 
                        max_tok=max_tokens,
                        top_p=top_p,
                        top_k=top_k
                    )
                
                # Th√™m ph·∫£n h·ªìi c·ªßa AI
                st.session_state.messages.append({
                    "role": "assistant",
                    "content": response,
                    "model": model_choice,
                    "timestamp": datetime.now().strftime("%H:%M:%S")
                })
                
                # Clear input v√† refresh
                st.rerun()
                
        else:
            st.error("‚ùå API key kh√¥ng h·ª£p l·ªá ho·∫∑c model kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra l·∫°i!")
            st.info("**Ki·ªÉm tra:**\n- API key c√≥ ƒë√∫ng kh√¥ng?\n- Model c√≥ ƒë∆∞·ª£c h·ªó tr·ª£ kh√¥ng?\n- K·∫øt n·ªëi internet ·ªïn ƒë·ªãnh kh√¥ng?")

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    üí° <strong>M·∫πo:</strong> Th·ª≠ ƒëi·ªÅu ch·ªânh c√°c th√¥ng s·ªë ƒë·ªÉ c√≥ tr·∫£i nghi·ªám chat t·ªët h∆°n<br>
    üîß ƒê∆∞·ª£c x√¢y d·ª±ng v·ªõi Streamlit & Google AI Studio REST API<br>
    ‚úÖ <strong>T∆∞∆°ng th√≠ch v·ªõi Python 3.13+</strong>
</div>
""", unsafe_allow_html=True)